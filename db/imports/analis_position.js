'use strict'
const cfindByNamePosition = require('./src/controller_farm_auth_position').position
// Скрипт АНАЛИЗ полноты соответствия текущего справочника farm.auth_position данным в выгрузке в СК по липецку за январь 2020года
const log = require('./src/common/logger')
const fs = require('fs')

const FILE_CSV = './file_test/lipetsk_01_2020.csv'

async function loadFile (path) {
  return new Promise((resolve, reject) => {
    fs.readFile(path, 'utf8', function (err, data) {
      if (err) {
        reject(err)
      }
      resolve(data)
    })
  })
}

// Заголовок CSV
// Регион;Полное наименование МО;Подразделение;Месяц;СНИЛС;Занимаемая должность;Основное место работы/Совместительство;Источники финансирования;Норма рабочего времени (часы);Фактическое количество отработанного времени (часы);Должностной оклад;Выплаты компенсационного характера;;;;;;;;;;;;;;;выплаты за интенсивность и высокие результаты работы;;;выплаты за качество выполняемых работ;;выплаты за стаж работы, выслугу лет;;премиальные выплаты по итогам работы;;;надбавка "Молодой специалист";Надбавка за почётное звание;Надбавка за наличие "Учёной степени";доплата за работу в сельской местности;надбавка за "участковость";Иные выплаты стимулирующего характера;Оплата за неотработанное время, единовременные поощрительные и другие выплаты, оплата питания и проживания, имеющая систематический характер в соответствии с пунктами 84.2.,84.3,84.4 приказа федеральной службы государственной статистики от 22.11.2017 №772
// ;;;;;;;;;;;выплаты работникам, занятым на тяжелых работах, работах с вредными и (или) опасными и иными особыми условиями труда;выплаты за работу в местностях с особыми климатическими условиями;;;;выплаты за работу в условиях, отклоняющихся от нормальных (при выполнении работ различной квалификации, совмещении профессий (должностей), расширении зон обслуживания, увеличении объема выполняемых работ, сверхурочной работе, работе в ночное время и при выполнении работ в других условиях, отклоняющихся от нормальных);;;;;;;;надбавка за работу со сведениями, составляющими государственную тайну, их засекречиванием и рассекречиванием, а также за работу с шифрами;Иные выплаты компенсационного характера;;;;;;;;;;;;;;;;;
// ;;;;;;;;;;;;районный коэффициент;;коэффициент за работу в пустынных и безводных местностях;;коэффициент за работу в высокогорных районах;;надбавка за стаж работы в районах Крайнего Севера и приравненных к ним местностях;;доплата за совмещение профессий (должностей);;доплата за работу в сельской местности;доплата за расширение зон обслуживания;;доплата за увеличение объема работы;;доплата за исполнение обязанностей временно отсутствующего работника без освобождения от работы, определенной трудовым договором;;доплата за выполнение работ различной квалификации;;доплата за работу в выходные и праздничные дни;доплата за работу в ночное время;;;;надбавка за интенсивность труда;премия за высокие результаты работы;премия за выполнение особо важных и ответственных работ;надбавка за наличие квалификационной категории;премия за образцовое выполнение государственного (муниципального) задания;надбавка за выслугу лет в организации;надбавка за стаж непрерывной работы (медицинский стаж);премия по итогам работы за месяц;премия по итогам работы за квартал;премия по итогам работы за год;;;;;;;
// 0 Липецкая область;
// 1 Государственное учреждение здравоохранения "Областная больница №2";
// 2 Поликлиника;
// 3 Январь;
// 4 03782967704;
// 5 медицинская сестра;
// 6 Основное;
// 7 Средства от платных мед услуг;
// 8 132,6;132,6;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;206,98;0

const runNext = async function () {
  try {
    const rawdata = await loadFile(FILE_CSV)
    const arrRowsCsv = rawdata.toString().split('\n')
    let n = 0
    for (let i = 1; i < arrRowsCsv.length; i++) {
      const fileds = arrRowsCsv[i].trim().split(';')
      const params = { name: String(fileds[5]).trim() }
 	    if (fileds[0] !== '') {
 	      const res = await cfindByNamePosition(params).catch(err => log.error(err.message))
        if (!res) {
          n = n + 1
          console.log(n, 'НЕ НАЙДЕНО СООТВЕТСТВИЕ ДОЛЖНОСТИ', fileds[5])
        }
 	    }
    }
  } catch (err) {
    log.error(err.message)
  }
}

runNext()
